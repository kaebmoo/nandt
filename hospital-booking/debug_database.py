# debug_database.py - Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Database

import os
import sys
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import models
sys.path.append('flask_app/app')
import models

DATABASE_URL = os.environ.get("DATABASE_URL")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def check_database_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ database ‡πÅ‡∏•‡∏∞ schemas"""
    
    print("=== Database Status Check ===")
    
    db = SessionLocal()
    inspector = inspect(engine)
    
    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schemas ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("\nüìÇ Available Schemas:")
        schemas = inspector.get_schema_names()
        for schema in schemas:
            print(f"   - {schema}")
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡πÉ‡∏ô public schema
        print(f"\nüìã Tables in 'public' schema:")
        public_tables = inspector.get_table_names(schema='public')
        for table in public_tables:
            print(f"   - {table}")
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
        print(f"\nüè• Hospitals in database:")
        hospitals = db.query(models.Hospital).all()
        
        if not hospitals:
            print("   ‚ùå No hospitals found!")
            return False
            
        for hospital in hospitals:
            print(f"   - {hospital.name} (subdomain: {hospital.subdomain}, schema: {hospital.schema_name})")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ schema ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
            if hospital.schema_name in schemas:
                print(f"     ‚úÖ Schema '{hospital.schema_name}' exists")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡πÉ‡∏ô schema ‡∏ô‡∏µ‡πâ
                tenant_tables = inspector.get_table_names(schema=hospital.schema_name)
                if tenant_tables:
                    print(f"     üìã Tables: {', '.join(tenant_tables)}")
                else:
                    print(f"     ‚ùå No tables in schema '{hospital.schema_name}'")
                    return False
            else:
                print(f"     ‚ùå Schema '{hospital.schema_name}' does NOT exist")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error checking database: {e}")
        return False
    finally:
        db.close()

def fix_missing_tables():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ tables ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
    
    print("\n=== Fixing Missing Tables ===")
    
    db = SessionLocal()
    
    try:
        hospitals = db.query(models.Hospital).all()
        
        for hospital in hospitals:
            schema_name = hospital.schema_name
            print(f"\nüîß Fixing schema: {schema_name}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á schema ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            db.execute(text(f'CREATE SCHEMA IF NOT EXISTS "{schema_name}"'))
            print(f"   ‚úÖ Schema created/verified")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á tables
            tenant_tables = [models.Patient.__table__, models.Appointment.__table__]
            
            # ‡πÄ‡∏Å‡πá‡∏ö schema ‡πÄ‡∏î‡∏¥‡∏°
            original_schema = models.Base.metadata.schema
            
            try:
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schema ‡πÉ‡∏´‡∏°‡πà
                models.Base.metadata.schema = schema_name
                
                for table in tenant_tables:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏ô schema ‡∏ô‡∏µ‡πâ
                    table_copy = table.tometadata(models.Base.metadata, schema=schema_name)
                    table_copy.create(db.bind, checkfirst=True)
                    print(f"   ‚úÖ Table '{table.name}' created")
                    
            finally:
                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ schema ‡πÄ‡∏î‡∏¥‡∏°
                models.Base.metadata.schema = original_schema
        
        db.commit()
        print("\n‚úÖ All schemas and tables fixed!")
        
    except Exception as e:
        print(f"‚ùå Error fixing tables: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def test_tenant_connection(subdomain):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö tenant schema"""
    
    print(f"\n=== Testing Tenant Connection: {subdomain} ===")
    
    db = SessionLocal()
    
    try:
        # ‡∏´‡∏≤ hospital ‡∏à‡∏≤‡∏Å subdomain
        hospital = db.query(models.Hospital).filter_by(subdomain=subdomain).first()
        
        if not hospital:
            print(f"‚ùå Hospital with subdomain '{subdomain}' not found")
            return False
            
        schema_name = hospital.schema_name
        print(f"üè• Hospital: {hospital.name}")
        print(f"üìÇ Schema: {schema_name}")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ search_path
        db.execute(text(f'SET search_path TO "{schema_name}", public'))
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query
        result = db.execute(text("SELECT COUNT(*) FROM patients")).scalar()
        print(f"üë• Patients count: {result}")
        
        result = db.execute(text("SELECT COUNT(*) FROM appointments")).scalar()
        print(f"üìÖ Appointments count: {result}")
        
        print("‚úÖ Tenant connection successful!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing tenant connection: {e}")
        return False
    finally:
        db.execute(text('SET search_path TO public'))
        db.close()

def create_sample_data(subdomain):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    print(f"\n=== Creating Sample Data for: {subdomain} ===")
    
    db = SessionLocal()
    
    try:
        # ‡∏´‡∏≤ hospital
        hospital = db.query(models.Hospital).filter_by(subdomain=subdomain).first()
        if not hospital:
            print(f"‚ùå Hospital '{subdomain}' not found")
            return
            
        schema_name = hospital.schema_name
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ search_path
        db.execute(text(f'SET search_path TO "{schema_name}", public'))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_patients = [
            "INSERT INTO patients (name, phone_number, email) VALUES ('‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', '0812345678', 'somchai@email.com') ON CONFLICT DO NOTHING",
            "INSERT INTO patients (name, phone_number, email) VALUES ('‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', '0823456789', 'somying@email.com') ON CONFLICT DO NOTHING",
            "INSERT INTO patients (name, phone_number, email) VALUES ('‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏£‡∏±‡∏Å‡∏î‡∏µ', '0834567890', 'somsak@email.com') ON CONFLICT DO NOTHING"
        ]
        
        for sql in sample_patients:
            db.execute(text(sql))
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_appointments = [
            "INSERT INTO appointments (patient_id, start_time, end_time, notes) VALUES (1, '2024-08-11 09:00:00', '2024-08-11 09:30:00', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ') ON CONFLICT DO NOTHING",
            "INSERT INTO appointments (patient_id, start_time, end_time, notes) VALUES (2, '2024-08-11 10:00:00', '2024-08-11 10:30:00', '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ü‡∏±‡∏ô') ON CONFLICT DO NOTHING",
            "INSERT INTO appointments (patient_id, start_time, end_time, notes) VALUES (3, '2024-08-11 14:00:00', '2024-08-11 14:30:00', '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•') ON CONFLICT DO NOTHING"
        ]
        
        for sql in sample_appointments:
            db.execute(text(sql))
            
        db.commit()
        print("‚úÖ Sample data created successfully!")
        
    except Exception as e:
        print(f"‚ùå Error creating sample data: {e}")
        db.rollback()
    finally:
        db.execute(text('SET search_path TO public'))
        db.close()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô debug script"""
    
    print("üîç Hospital Booking System - Database Debug Tool")
    print("=" * 50)
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ database
    if not check_database_status():
        print("\n‚ùå Database has issues. Attempting to fix...")
        fix_missing_tables()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if check_database_status():
            print("\n‚úÖ Database issues resolved!")
        else:
            print("\n‚ùå Unable to resolve database issues.")
            return
    
    # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö tenant connection
    test_subdomain = "humnoi"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô subdomain ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    
    if test_tenant_connection(test_subdomain):
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        create_data = input(f"\n‚ùì Create sample data for '{test_subdomain}'? (y/N): ")
        if create_data.lower() == 'y':
            create_sample_data(test_subdomain)
    
    print(f"\n‚úÖ Debug complete!")
    print(f"üåê Try accessing: http://localhost:5001/dashboard?subdomain={test_subdomain}")

if __name__ == "__main__":
    main()