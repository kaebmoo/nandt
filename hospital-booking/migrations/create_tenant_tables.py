# create_tenant_tables.py - Script ‡∏™‡∏£‡πâ‡∏≤‡∏á tenant tables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hospital booking system

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import models
sys.path.append('flask_app/app')
import models

DATABASE_URL = os.environ.get("DATABASE_URL")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def create_tenant_tables(subdomain):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á tenant tables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö subdomain ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    
    print(f"=== Creating Tenant Tables for: {subdomain} ===")
    
    db = SessionLocal()
    schema_name = f"tenant_{subdomain}"
    
    try:
        # ‡∏´‡∏≤ hospital ‡∏à‡∏≤‡∏Å subdomain
        hospital = db.query(models.Hospital).filter_by(subdomain=subdomain).first()
        
        if not hospital:
            print(f"‚ùå Hospital with subdomain '{subdomain}' not found")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á hospital record ‡πÉ‡∏´‡∏°‡πà
            hospital = models.Hospital(
                name=f"Demo Hospital ({subdomain})",
                subdomain=subdomain,
                schema_name=schema_name
            )
            db.add(hospital)
            db.commit()
            print(f"‚úÖ Created hospital record for '{subdomain}'")
        
        print(f"üè• Hospital: {hospital.name}")
        print(f"üìÇ Schema: {schema_name}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á schema ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        db.execute(text(f'CREATE SCHEMA IF NOT EXISTS "{schema_name}"'))
        print(f"‚úÖ Schema '{schema_name}' created/verified")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ search_path
        db.execute(text(f'SET search_path TO "{schema_name}", public'))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ TenantBase
        models.TenantBase.metadata.create_all(bind=engine)
        print("‚úÖ All tenant tables created")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tenant_tables = inspector.get_table_names(schema=schema_name)
        print(f"üìã Created tables: {', '.join(tenant_tables)}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        create_initial_data(db)
        
        db.commit()
        print(f"‚úÖ Tenant setup complete for '{subdomain}'!")
        
    except Exception as e:
        print(f"‚ùå Error creating tenant tables: {e}")
        db.rollback()
        raise
    finally:
        db.execute(text('SET search_path TO public'))
        db.close()

def create_initial_data(db):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tenant"""
    
    print("\nüìù Creating initial data...")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á default provider
        provider_exists = db.execute(text("SELECT COUNT(*) FROM providers")).scalar()
        
        if provider_exists == 0:
            db.execute(text("""
                INSERT INTO providers (name, title, department, is_active, public_booking_url, bio)
                VALUES 
                    ('‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', '‡∏ô‡∏û.', '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true, 'dr-somchai', '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
                    ('‡∏û‡∏ç.‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', '‡∏û‡∏ç.', '‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏°', true, 'dr-somying', '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏õ‡∏µ')
            """))
            print("‚úÖ Default providers created")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á default event types
        event_type_exists = db.execute(text("SELECT COUNT(*) FROM event_types")).scalar()
        
        if event_type_exists == 0:
            db.execute(text("""
                INSERT INTO event_types (name, slug, description, duration_minutes, color, is_active, buffer_before_minutes, buffer_after_minutes, min_notice_hours, max_advance_days)
                VALUES 
                    ('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', 'general-checkup', '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', 30, '#6366f1', true, 10, 10, 4, 60),
                    ('‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á', 'specialist-consult', '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç', 45, '#10b981', true, 15, 15, 24, 90),
                    ('‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏î‡πá‡∏Å', 'child-checkup', '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å', 30, '#f59e0b', true, 10, 10, 4, 30),
                    ('‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ', 'annual-checkup', '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 60, '#ef4444', true, 15, 15, 48, 120)
            """))
            print("‚úÖ Default event types created")
        
        # Commit ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á foreign key references
        db.commit()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á default availability ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
        availability_exists = db.execute(text("SELECT COUNT(*) FROM availabilities")).scalar()
        
        if availability_exists == 0:
            # ‡∏î‡∏∂‡∏á actual provider IDs ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            provider_ids = db.execute(text("SELECT id FROM providers ORDER BY id")).fetchall()
            event_type_ids = db.execute(text("SELECT id FROM event_types ORDER BY id")).fetchall()
            
            if provider_ids and event_type_ids:
                provider1_id = provider_ids[0][0]
                provider2_id = provider_ids[1][0] if len(provider_ids) > 1 else provider1_id
                event_type1_id = event_type_ids[0][0]
                event_type3_id = event_type_ids[2][0] if len(event_type_ids) > 2 else event_type1_id
                
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö provider 1 (‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢) - ‡πÉ‡∏ä‡πâ enum values ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                day_names = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY']
                for day_name in day_names:
                    db.execute(text(f"""
                        INSERT INTO availabilities (provider_id, event_type_id, day_of_week, start_time, end_time, timezone, is_active)
                        VALUES 
                            ({provider1_id}, {event_type1_id}, '{day_name}', '08:30', '16:30', 'Asia/Bangkok', true)
                    """))
                
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö provider 2 (‡∏û‡∏ç.‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ child checkup
                for day_name in day_names:
                    db.execute(text(f"""
                        INSERT INTO availabilities (provider_id, event_type_id, day_of_week, start_time, end_time, timezone, is_active)
                        VALUES 
                            ({provider2_id}, {event_type3_id}, '{day_name}', '09:00', '15:00', 'Asia/Bangkok', true)
                    """))
                
                print("‚úÖ Default availability created")
            else:
                print("‚ö†Ô∏è No providers or event types found, skipping availability")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        patient_exists = db.execute(text("SELECT COUNT(*) FROM patients")).scalar()
        
        if patient_exists == 0:
            db.execute(text("""
                INSERT INTO patients (name, phone_number, email)
                VALUES 
                    ('‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', '0812345678', 'somchai@email.com'),
                    ('‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', '0823456789', 'somying@email.com'),
                    ('‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏¥‡∏ô‡∏¥ ‡∏™‡∏∏‡∏Ç‡πÉ‡∏à', '0834567890', 'mini@email.com')
            """))
            print("‚úÖ Sample patients created")
            
    except Exception as e:
        print(f"‚ùå Error creating initial data: {e}")
        raise

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    
    print("üè• Hospital Booking System - Tenant Tables Creator")
    print("=" * 55)
    
    # ‡∏ñ‡∏≤‡∏° subdomain
    subdomain = input("Enter subdomain to create (e.g., 'demo'): ").strip()
    
    if not subdomain:
        print("‚ùå Subdomain is required")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ subdomain ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°
    if not subdomain.replace('-', '').isalnum():
        print("‚ùå Subdomain must contain only alphanumeric characters and hyphens")
        return
    
    try:
        create_tenant_tables(subdomain)
        print(f"\n‚úÖ Success! You can now use:")
        print(f"   üåê Web: http://localhost:5001/dashboard?subdomain={subdomain}")
        print(f"   üîó API: http://localhost:8000/api/v1/tenants/{subdomain}/event-types")
        
    except Exception as e:
        print(f"\n‚ùå Failed to create tenant tables: {e}")
        return

if __name__ == "__main__":
    main()